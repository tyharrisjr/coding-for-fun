export class AppInfosCache {
    /**
     * @param {import('@appium/types').AppiumLogger} log
     */
    constructor(log: import('@appium/types').AppiumLogger);
    log: import("@appium/types").AppiumLogger;
    /**
     *
     * @param {string} appPath
     * @param {string} propertyName
     * @returns {Promise<any>}
     */
    extractManifestProperty(appPath: string, propertyName: string): Promise<any>;
    /**
     *
     * @param {string} appPath
     * @returns {Promise<string>}
     */
    extractBundleId(appPath: string): Promise<string>;
    /**
     *
     * @param {string} appPath
     * @returns {Promise<string>}
     */
    extractBundleVersion(appPath: string): Promise<string>;
    /**
     *
     * @param {string} appPath
     * @returns {Promise<string[]>}
     */
    extractAppPlatforms(appPath: string): Promise<string[]>;
    /**
     *
     * @param {string} appPath
     * @returns {Promise<string>}
     */
    extractExecutableName(appPath: string): Promise<string>;
    /**
     *
     * @param {string} appPath Full path to the .ipa or .app bundle
     * @returns {Promise<import('@appium/types').StringRecord>} The payload of the manifest plist
     * @throws {Error} If the given app is not a valid bundle
     */
    put(appPath: string): Promise<import('@appium/types').StringRecord>;
}
//# sourceMappingURL=app-infos-cache.d.ts.map