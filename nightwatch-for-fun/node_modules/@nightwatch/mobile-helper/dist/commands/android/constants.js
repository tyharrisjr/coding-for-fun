"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BINARY_TO_PACKAGE_NAME = exports.SDK_BINARY_LOCATIONS = exports.SETUP_CONFIG_QUES = exports.ABI = exports.DEFAULT_CHROME_VERSIONS = exports.DEFAULT_FIREFOX_VERSION = exports.NIGHTWATCH_AVD = exports.AVAILABLE_OPTIONS = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
exports.AVAILABLE_OPTIONS = {
    help: {
        alias: ['h'],
        description: 'Help for android command.'
    },
    setup: {
        alias: ['install', 'i'],
        description: 'Automatically setup all the missing requirements.'
    },
    mode: {
        alias: ['m'],
        description: 'Verify/setup requirements for real-device or emulator. Available args: "real", "emulator", "both"'
    },
    browsers: {
        alias: ['browser', 'b'],
        description: 'Browsers to setup on Android emulator. Available args: "chrome", "firefox", "both", "none"'
    },
    appium: {
        alias: [],
        description: 'Make sure the final setup works with Appium out-of-the-box.'
    }
};
exports.NIGHTWATCH_AVD = 'nightwatch-android-11';
exports.DEFAULT_FIREFOX_VERSION = '105.1.0';
exports.DEFAULT_CHROME_VERSIONS = ['83', '91'];
exports.ABI = (() => {
    const arch = process.arch;
    if (arch === 'arm') {
        return 'armeabi-v7a';
    }
    else if (arch === 'arm64') {
        return 'arm64-v8a';
    }
    else if (['ia32', 'mips', 'ppc', 's390'].includes(arch)) {
        return 'x86';
    }
    // Handle case when Apple M1's arch is switched to x64.
    if (arch === 'x64' && os_1.default.cpus()[0].model.includes('Apple')) {
        return 'arm64-v8a';
    }
    return 'x86_64';
})();
exports.SETUP_CONFIG_QUES = [
    {
        type: 'list',
        name: 'mode',
        message: 'Select target device(s):',
        choices: [
            { name: 'Real Android Device', value: 'real' },
            { name: 'Android Emulator', value: 'emulator' },
            { name: 'Both', value: 'both' }
        ]
    },
    {
        type: 'list',
        name: 'browsers',
        message: '[Emulator] Select browser(s) to set up on Emulator:',
        choices: [
            { name: 'Google Chrome', value: 'chrome' },
            { name: 'Mozilla Firefox', value: 'firefox' },
            { name: 'Both', value: 'both' },
            { name: 'None', value: 'none' }
        ],
        when: (answers) => ['emulator', 'both'].includes(answers.mode)
    }
];
exports.SDK_BINARY_LOCATIONS = {
    sdkmanager: path_1.default.join('cmdline-tools', 'latest', 'bin'),
    avdmanager: path_1.default.join('cmdline-tools', 'latest', 'bin'),
    adb: 'platform-tools',
    emulator: 'emulator'
};
exports.BINARY_TO_PACKAGE_NAME = {
    sdkmanager: 'cmdline-tools;latest',
    avdmanager: 'cmdline-tools;latest',
    adb: 'platform-tools',
    emulator: 'emulator',
    [exports.NIGHTWATCH_AVD]: `system-images;android-30;google_apis;${exports.ABI}`
};
