"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadFirefoxAndroid = exports.getFirefoxApkName = exports.getLatestVersion = exports.downloadWithProgressBar = exports.getBinaryLocation = exports.getBinaryNameForOS = exports.getAllAvailableOptions = void 0;
const ansi_colors_1 = __importDefault(require("ansi-colors"));
const axios_1 = __importDefault(require("axios"));
const cli_progress_1 = __importDefault(require("cli-progress"));
const download_1 = __importDefault(require("download"));
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const which_1 = __importDefault(require("which"));
const utils_1 = require("../../../utils");
const constants_1 = require("../constants");
const getAllAvailableOptions = () => {
    const mainOptions = Object.keys(constants_1.AVAILABLE_OPTIONS);
    const allOptions = [];
    mainOptions.forEach((option) => allOptions.push(option, ...constants_1.AVAILABLE_OPTIONS[option].alias));
    return allOptions;
};
exports.getAllAvailableOptions = getAllAvailableOptions;
const getBinaryNameForOS = (platform, binaryName) => {
    if (platform !== 'windows') {
        return binaryName;
    }
    if (['sdkmanager', 'avdmanager', 'apksigner'].includes(binaryName)) {
        return `${binaryName}.bat`;
    }
    if (!path_1.default.extname(binaryName)) {
        return `${binaryName}.exe`;
    }
    return binaryName;
};
exports.getBinaryNameForOS = getBinaryNameForOS;
const getBinaryLocation = (sdkRoot, platform, binaryName, suppressOutput = false) => {
    const failLocations = [];
    const binaryFullName = (0, exports.getBinaryNameForOS)(platform, binaryName);
    const pathToBinary = path_1.default.join(sdkRoot, constants_1.SDK_BINARY_LOCATIONS[binaryName], binaryFullName);
    if (fs_1.default.existsSync(pathToBinary)) {
        if (!suppressOutput) {
            console.log(`  ${ansi_colors_1.default.green((0, utils_1.symbols)().ok)} ${ansi_colors_1.default.cyan(binaryName)} binary is present at '${pathToBinary}'`);
        }
        return pathToBinary;
    }
    failLocations.push(pathToBinary);
    if (binaryName === 'adb') {
        // look for adb in sdkRoot (as it is a standalone binary).
        const adbPath = path_1.default.join(sdkRoot, binaryFullName);
        if (fs_1.default.existsSync(adbPath)) {
            if (!suppressOutput) {
                console.log(`  ${ansi_colors_1.default.green((0, utils_1.symbols)().ok)} ${ansi_colors_1.default.cyan(binaryName)} binary is present at '${adbPath}'`);
            }
            return adbPath;
        }
        failLocations.push(adbPath);
        // Look for adb in PATH also (runnable as `adb --version`)
        const adbLocation = which_1.default.sync(binaryFullName, { nothrow: true });
        if (adbLocation) {
            if (!suppressOutput) {
                console.log(`  ${ansi_colors_1.default.green((0, utils_1.symbols)().ok)} ${ansi_colors_1.default.cyan(binaryName)} binary is present at '${adbPath}' which is added in 'PATH'`);
            }
            return 'PATH';
        }
        failLocations.push('PATH');
    }
    if (!suppressOutput) {
        for (const location of failLocations) {
            console.log(`  ${ansi_colors_1.default.red((0, utils_1.symbols)().fail)} ${ansi_colors_1.default.cyan(binaryName)} binary not present at '${location}'`);
        }
    }
    return '';
};
exports.getBinaryLocation = getBinaryLocation;
const downloadWithProgressBar = async (url, dest, extract = false) => {
    const progressBar = new cli_progress_1.default.Bar({
        format: ' [{bar}] {percentage}% | ETA: {eta}s'
    }, cli_progress_1.default.Presets.shades_classic);
    try {
        const stream = (0, download_1.default)(url, dest, {
            extract
        });
        progressBar.start(100, 0);
        await stream.on('downloadProgress', function (progress) {
            progressBar.update(progress.percent * 100);
        });
        progressBar.stop();
        return true;
    }
    catch {
        progressBar.stop();
        return false;
    }
};
exports.downloadWithProgressBar = downloadWithProgressBar;
const getLatestVersion = async (browser) => {
    if (browser === 'firefox') {
        try {
            const { data } = await (0, axios_1.default)('https://api.github.com/repos/mozilla-mobile/fenix/releases/latest');
            return data['tag_name'].slice(1);
        }
        catch {
            return constants_1.DEFAULT_FIREFOX_VERSION;
        }
    }
    else {
        return constants_1.DEFAULT_CHROME_VERSIONS[1];
    }
};
exports.getLatestVersion = getLatestVersion;
const getFirefoxApkName = (version) => {
    return `fenix-${version}.multi.android-${constants_1.ABI}.apk`;
};
exports.getFirefoxApkName = getFirefoxApkName;
const downloadFirefoxAndroid = async (version) => {
    if (!version) {
        version = await (0, exports.getLatestVersion)('firefox');
    }
    const tempdir = os_1.default.tmpdir();
    const apkName = (0, exports.getFirefoxApkName)(version);
    if (fs_1.default.existsSync(path_1.default.join(tempdir, apkName))) {
        console.log(`  ${ansi_colors_1.default.green((0, utils_1.symbols)().ok)} APK already downloaded.`);
        return true;
    }
    const apkDownloadUrl = `https://archive.mozilla.org/pub/fenix/releases/${version}/android/fenix-${version}-android-${constants_1.ABI}/${apkName}`;
    return await (0, exports.downloadWithProgressBar)(apkDownloadUrl, tempdir);
};
exports.downloadFirefoxAndroid = downloadFirefoxAndroid;
